# IDはユニークな文字列であれば何でも良いが、なるべくこの形式で（たぶん並べ替えやすいので）
qid = "q00000207"

# タグは文字列の配列。なしでもよい。
# タグには言語の区別はなくても良いだろう。
tags = [
  "window-function", "moving average", "sys_calendar"
]

# カテゴリは必ず１つの文字列。問題の分類に用いる
# 使用できるカテゴリ一覧は別途用意する
# 現在想定しているものは以下（これに含まれないものをアプリ上で表示されないようになっているので、別途アプリ側で追加する必要がある）
#  ja: ("SQL/Teradata 基礎", "SQL/Teradata 中級", "地理空間情報の分析", "時系列情報の分析")
#  en: ("SQL/Teradata Basic", "SQL/Teradata Intermediate", "Geospatial Information Analysis", "Time-series Data")
[category]
ja = "SQL/Teradata 中級"
en = "SQL/Teradata Intermediate"

[title]
ja = """店舗売上の平滑化"""
en = """Smoothing revenues at stores"""

[content]
ja = """
TeraShirt社では店舗売上を日別で集計していますが、日々の売上金額にはバラつきや周期変動（休日の売上が多いなど）があることが考えられます。
そこで、売上の実績値に加えて、その移動平均値を報告することにしました。
<br />
店舗別、日別で売上金額の合計を計算し、その前後３日の平均売上金額（つまり、７日間ウィンドウの移動平均値）を計算してください。
店舗ID、店舗名、日付、売上金額、移動平均値を表示してください。
<br />
簡単化のため、出力するのは 2022年11月の30日間に限定し、売上のない日も含めるようにしてください。
<br />
また、結果は店舗IDと日付で降順に並べてください。
"""
en = """
TeraShirt company tracks the store revenues on the daily basis, but the revenue values may contain noise and seasonal variations.
To overcome this limitation, they have decided to include the moving average to the report.
<br />
For each store and date, calculate the total sales revenue and the average from three days before to three days after (i.e. moving average for the seven days window).
Display the store id, store name, date, revenue and the moving average.
<br />
For simplicitly, report only for the thirty days in November 2022, and make sure to include the days with no revenue.
<br />
Order the result by the store id and the date.
"""

# ヒントが不要なら空文字列にする
[hint]
ja = ""
en = ""

# 参考文献、ウェブサイト (HTMLコードを直接書く)
# 不要なら空文字列にする
[references]
ja = ""
en = ""

# 正誤判定に関する定義
[judgement]
check_shape = false  # クエリ結果の行列数の一致を求めるか
shape = [120, 5]      # 想定されたクエリ結果のサイズ

check_type = false         # クエリ結果の列の型の一致を求めるか
types = [ "int", "str" ]   # 想定されたクエリ結果の変数型

check_value = true  # 想定解との値の一致を求めるか
ordered = false     # クエリ結果の並び順が指定されているかどうか
value_from = "query"  # 想定結果の指定方法
                    # csv      : 想定結果のCSV文字列を指定
                    # query    : 想定結果を生成するクエリを指定。動的に実行して判定する

csv = """
store_id,store_name,calendar_date,revenue,revenue_moving_average
1,３番通り店,2022-11-01,0,4057.1428571428573
1,３番通り店,2022-11-02,6750,3114.285714285714
1,３番通り店,2022-11-03,0,2685.714285714286
1,３番通り店,2022-11-04,0,2107.1428571428573
1,３番通り店,2022-11-05,0,2992.8571428571427
1,３番通り店,2022-11-06,6000,3614.285714285714
1,３番通り店,2022-11-07,2000,4578.571428571428
1,３番通り店,2022-11-08,6200,6435.714285714285
1,３番通り店,2022-11-09,11100,6864.285714285715
1,３番通り店,2022-11-10,6750,6007.142857142857
1,３番通り店,2022-11-11,13000,6150.0
1,３番通り店,2022-11-12,3000,7942.857142857143
1,３番通り店,2022-11-13,0,6785.714285714285
1,３番通り店,2022-11-14,3000,5821.428571428572
1,３番通り店,2022-11-15,18750,3964.285714285714
1,３番通り店,2022-11-16,3000,5121.428571428572
1,３番通り店,2022-11-17,0,5121.428571428572
1,３番通り店,2022-11-18,0,5078.571428571428
1,３番通り店,2022-11-19,11100,2400.0
1,３番通り店,2022-11-20,0,1971.4285714285713
1,３番通り店,2022-11-21,2700,3735.714285714286
1,３番通り店,2022-11-22,0,4421.428571428572
1,３番通り店,2022-11-23,0,2835.714285714286
1,３番通り店,2022-11-24,12350,3157.1428571428573
1,３番通り店,2022-11-25,4800,3928.5714285714284
1,３番通り店,2022-11-26,0,3928.5714285714284
1,３番通り店,2022-11-27,2250,4700.0
1,３番通り店,2022-11-28,8100,2935.714285714286
1,３番通り店,2022-11-29,0,3792.8571428571427
1,３番通り店,2022-11-30,5400,5364.285714285715
2,中央駅前店,2022-11-01,4500,3900.0
2,中央駅前店,2022-11-02,0,4414.285714285715
2,中央駅前店,2022-11-03,0,3557.1428571428573
2,中央駅前店,2022-11-04,9000,3814.285714285714
2,中央駅前店,2022-11-05,3600,3514.285714285714
2,中央駅前店,2022-11-06,6000,5571.428571428572
2,中央駅前店,2022-11-07,3600,5857.142857142857
2,中央駅前店,2022-11-08,2400,4571.428571428572
2,中央駅前店,2022-11-09,14400,4057.1428571428573
2,中央駅前店,2022-11-10,2000,4007.1428571428573
2,中央駅前店,2022-11-11,0,3492.8571428571427
2,中央駅前店,2022-11-12,0,4585.714285714285
2,中央駅前店,2022-11-13,5650,2528.5714285714284
2,中央駅前店,2022-11-14,0,3828.5714285714284
2,中央駅前店,2022-11-15,10050,4471.428571428572
2,中央駅前店,2022-11-16,0,5157.142857142857
2,中央駅前店,2022-11-17,11100,4350.0
2,中央駅前店,2022-11-18,4500,4350.0
2,中央駅前店,2022-11-19,4800,3128.5714285714284
2,中央駅前店,2022-11-20,0,3557.1428571428573
2,中央駅前店,2022-11-21,0,1971.4285714285713
2,中央駅前店,2022-11-22,1500,1328.5714285714287
2,中央駅前店,2022-11-23,3000,642.8571428571429
2,中央駅前店,2022-11-24,0,3571.4285714285716
2,中央駅前店,2022-11-25,0,3571.4285714285716
2,中央駅前店,2022-11-26,0,3357.1428571428573
2,中央駅前店,2022-11-27,20500,3100.0
2,中央駅前店,2022-11-28,0,3100.0
2,中央駅前店,2022-11-29,0,3100.0
2,中央駅前店,2022-11-30,1200,6407.142857142857
3,空港第２ターミナル店,2022-11-01,0,2850.0
3,空港第２ターミナル店,2022-11-02,0,900.0
3,空港第２ターミナル店,2022-11-03,0,900.0
3,空港第２ターミナル店,2022-11-04,0,1614.2857142857142
3,空港第２ターミナル店,2022-11-05,5400,2042.857142857143
3,空港第２ターミナル店,2022-11-06,0,2414.285714285714
3,空港第２ターミナル店,2022-11-07,5900,2414.285714285714
3,空港第２ターミナル店,2022-11-08,3000,6885.714285714285
3,空港第２ターミナル店,2022-11-09,2600,6900.0
3,空港第２ターミナル店,2022-11-10,0,6900.0
3,空港第２ターミナル店,2022-11-11,31300,6057.142857142857
3,空港第２ターミナル店,2022-11-12,5500,6057.142857142857
3,空港第２ターミナル店,2022-11-13,0,6514.285714285715
3,空港第２ターミナル店,2022-11-14,0,6514.285714285715
3,空港第２ターミナル店,2022-11-15,3000,4928.571428571428
3,空港第２ターミナル店,2022-11-16,5800,4142.857142857143
3,空港第２ターミナル店,2022-11-17,0,4635.714285714285
3,空港第２ターミナル店,2022-11-18,20200,4635.714285714285
3,空港第２ターミナル店,2022-11-19,0,5064.285714285715
3,空港第２ターミナル店,2022-11-20,3450,4235.714285714285
3,空港第２ターミナル店,2022-11-21,0,4642.857142857143
3,空港第２ターミナル店,2022-11-22,6000,1757.142857142857
3,空港第２ターミナル店,2022-11-23,0,2400.0
3,空港第２ターミナル店,2022-11-24,2850,2121.4285714285716
3,空港第２ターミナル店,2022-11-25,0,2407.1428571428573
3,空港第２ターミナル店,2022-11-26,4500,3478.5714285714284
3,空港第２ターミナル店,2022-11-27,1500,3592.8571428571427
3,空港第２ターミナル店,2022-11-28,2000,3400.0
3,空港第２ターミナル店,2022-11-29,13500,3892.8571428571427
3,空港第２ターミナル店,2022-11-30,800,5164.285714285715
4,赤坂山アウトレット店,2022-11-01,1500,6142.857142857143
4,赤坂山アウトレット店,2022-11-02,1350,4435.714285714285
4,赤坂山アウトレット店,2022-11-03,0,5742.857142857143
4,赤坂山アウトレット店,2022-11-04,15600,5742.857142857143
4,赤坂山アウトレット店,2022-11-05,1350,5814.285714285715
4,赤坂山アウトレット店,2022-11-06,20400,6050.0
4,赤坂山アウトレット店,2022-11-07,0,6621.428571428572
4,赤坂山アウトレット店,2022-11-08,2000,5357.142857142857
4,赤坂山アウトレット店,2022-11-09,3000,5164.285714285715
4,赤坂山アウトレット店,2022-11-10,4000,2250.0
4,赤坂山アウトレット店,2022-11-11,6750,2250.0
4,赤坂山アウトレット店,2022-11-12,0,2392.8571428571427
4,赤坂山アウトレット店,2022-11-13,0,1964.2857142857142
4,赤坂山アウトレット店,2022-11-14,0,1392.857142857143
4,赤坂山アウトレット店,2022-11-15,3000,1892.857142857143
4,赤坂山アウトレット店,2022-11-16,0,3400.0
4,赤坂山アウトレット店,2022-11-17,0,3400.0
4,赤坂山アウトレット店,2022-11-18,10250,4685.714285714285
4,赤坂山アウトレット店,2022-11-19,10550,4257.142857142857
4,赤坂山アウトレット店,2022-11-20,0,4400.0
4,赤坂山アウトレット店,2022-11-21,9000,6435.714285714285
4,赤坂山アウトレット店,2022-11-22,0,5464.285714285715
4,赤坂山アウトレット店,2022-11-23,1000,6342.857142857143
4,赤坂山アウトレット店,2022-11-24,14250,6342.857142857143
4,赤坂山アウトレット店,2022-11-25,3450,6342.857142857143
4,赤坂山アウトレット店,2022-11-26,16700,6342.857142857143
4,赤坂山アウトレット店,2022-11-27,0,7642.857142857143
4,赤坂山アウトレット店,2022-11-28,9000,5835.714285714285
4,赤坂山アウトレット店,2022-11-29,0,5342.857142857143
4,赤坂山アウトレット店,2022-11-30,10100,2957.1428571428573
"""

query = """
WITH rev AS (
  SELECT
    store_id,
    purchase_date,
    SUM(sales_value) AS revenue
  FROM
    TeraShirt.store_sales
  GROUP BY 1,2
)
,alldays AS (
  SELECT
    s.store_id, c.calendar_date
  FROM
    sys_calendar.calendar AS c,
    (SELECT DISTINCT store_id FROM TeraShirt.store_sales) AS s
  WHERE
    c.calendar_date BETWEEN DATE '2022-10-29' AND DATE '2022-12-03'
)
,ma AS (
  SELECT 
    c.store_id,
    c.calendar_date,
    COALESCE(a.revenue, 0) AS revenue,
    AVG(COALESCE(a.revenue, 0)) OVER (
      PARTITION BY c.store_id ORDER BY c.calendar_date
      ROWS BETWEEN 3 PRECEDING AND 3 FOLLOWING) AS revenue_moving_average
  FROM
    alldays AS c
    LEFT JOIN rev AS a
      ON c.store_id = a.store_id AND c.calendar_date = a.purchase_date
)
SELECT
  ma.store_id,
  s.name,
  ma.calendar_date,
  ma.revenue,
  ma.revenue_moving_average
FROM
  ma INNER JOIN TeraShirt.store AS s ON ma.store_id = s.store_id
ORDER BY 1,3
"""

check_explain = false   # クエリのExplain結果に関する条件を課すか
explain_should_include = []      # Explanation が含むべきキーワードのリスト
explain_should_not_include = []  # Explanation が含んではいけないキーワードのリスト