# IDはユニークな文字列であれば何でも良いが、なるべくこの形式で（たぶん並べ替えやすいので）
qid = "q00000208"

# タグは文字列の配列。なしでもよい。
# タグには言語の区別はなくても良いだろう。
tags = [
  "Window関数", "LAG() OVER()", "LEAD() OVER()"
]

# カテゴリは必ず１つの文字列。問題の分類に用いる
# 使用できるカテゴリ一覧は別途用意する
# 現在想定しているものは以下（これに含まれないものをアプリ上で表示されないようになっているので、別途アプリ側で追加する必要がある）
#  ja: ("SQL/Teradata 基礎", "SQL/Teradata 中級", "地理空間情報の分析", "時系列情報の分析")
#  en: ("SQL/Teradata Basic", "SQL/Teradata Intermediate", "Geospatial Information Analysis", "Time-series Data")
[category]
ja = "SQL/Teradata 中級"
en = "SQL/Teradata Intermediate"

[title]
ja = """前後の購買における購入金額の取得"""
en = """Acquisition of purchase amounts in previous and subsequent purchases"""

[content]
ja = """<em>Terashirt.store_sales</em> テーブルには、顧客ごとの商品購入履歴データが含まれています。
各顧客ごとに1回あたりの購買における合計金額を算出し、次回・次々回の購入金額および前回・前々回の購入金額を求めてください。
なお、顧客IDがnullのデータは集計対象から除外すること。"""
en = """The <em>Terashirt.store_sales</em> table contains historical purchase data for each customer.
For each customer, calculate the total amount spent per purchase, and determine the amount spent for the next and subsequent purchases, as well as the previous and previous purchases.
Note that data with null customer IDs should be excluded from the total."""

# ヒントが不要なら空文字列にする
[hint]
ja = ""
en = ""

# 参考文献、ウェブサイト (HTMLコードを直接書く)
# 不要なら空文字列にする
[references]
ja = """
<ul>
<li><a href="https://docs.teradata.com/r/Teradata-VantageTM-SQL%E9%96%A2%E6%95%B0-%E5%BC%8F-%E3%81%8A%E3%82%88%E3%81%B2%E8%BF%B0%E9%83%A8-17.20/%E9%A0%86%E5%BA%8F%E4%BB%98%E3%81%8D%E5%88%86%E6%9E%90%E9%96%A2%E6%95%B0/%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%88%E3%82%A6%E9%9B%86%E7%B4%84%E9%96%A2%E6%95%B0/LAG/LEAD" rel="noopener noreferrer" target="_blank">LAG/LEAD</a>
</ul>
"""
en = """
<ul>
<li><a href="https://docs.teradata.com/r/Teradata-VantageTM-SQL-Functions-Expressions-and-Predicates-17.20/Ordered-Analytical/Window-Aggregate-Functions/LAG/LEAD" rel="noopener noreferrer" target="_blank">LAG/LEAD</a>
</ul>
"""

# 正誤判定に関する定義
[judgement]
check_shape = true  # クエリ結果の行列数の一致を求めるか
shape = [733, 8]      # 想定されたクエリ結果のサイズ

check_type = false         # クエリ結果の列の型の一致を求めるか
types = [ "int", "str" ]   # 想定されたクエリ結果の変数型

check_value = true  # 想定解との値の一致を求めるか
ordered = false     # クエリ結果の並び順が指定されているかどうか
value_from = "query"  # 想定結果の指定方法
                    # csv      : 想定結果のCSV文字列を指定
                    # query    : 想定結果を生成するクエリを指定。動的に実行して判定する

query = """
select
customer_id
,purchase_date
,purchase_timestamp
,total_sales_value
,lag(total_sales_value) over(partition by customer_id order by purchase_timestamp) as "前回購入金額"
,lag(total_sales_value, 2) over(partition by customer_id order by purchase_timestamp) as "前々回購入金額"
,lead(total_sales_value) over(partition by customer_id order by purchase_timestamp) as "次回購入金額"
,lead(total_sales_value, 2) over(partition by customer_id order by purchase_timestamp) as "次々回購入金額"
from (
	select
	customer_id
	,purchase_date
	,purchase_timestamp
	,sum(sales_value) as total_sales_value
	from store_sales 
	where customer_id is not null
	group by 1,2,3
) a1
order by 1,3;
"""

check_explain = false   # クエリのExplain結果に関する条件を課すか
explain_should_include = []      # Explanation が含むべきキーワードのリスト
explain_should_not_include = []  # Explanation が含んではいけないキーワードのリスト